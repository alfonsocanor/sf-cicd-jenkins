<apex:page docType="html-5.0" applyHtmlTag="false" showHeader="false" sidebar="false" standardStylesheets="false" controller="vlocity_cmt.CardCanvasController">
    <html xmlns:ng="http://angularjs.org" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ng-app="hybridCPQ" class="ng-cloak" dir="{!IF(isLanguageRTL, 'rtl', 'ltr')}">
        <head>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <style type="text/css">
            body {
                margin: 0px !important;
                padding: 0px !important;
            }
        </style>
            <!-- SLDS-->
            <apex:stylesheet value="{!IF(isLanguageRTL, URLFOR($Resource.vlocity_cmt__slds, '/assets/styles/salesforce-lightning-design-system-vf.rtl.min.css'), URLFOR($Resource.vlocity_cmt__slds, '/assets/styles/salesforce-lightning-design-system-vf.min.css'))}"/>
            <apex:stylesheet value="{!$Resource.vlocity_cmt__HybridCPQCss}"/>

            <!-- Salesforce Console API -->
            <!-- Common scripts -->
            <apex:includeScript value="/support/console/48.0/integration.js"/>
            <script src="{!URLFOR($Resource.vlocity_cmt__vlocity_core_assets, '/latest/vlocity_core_assets.js')}"></script>
            <script src="{!URLFOR($Resource.vlocity_cmt__angular_strap_bundle_1_6)}"></script>
        </head>
        <body>
            <div class="vlocity via-slds">
                <vloc-layout layout-name="cpq-base-grid" ctrl="CPQController"></vloc-layout>
            </div>

            <script src="{!$Resource.vlocity_cmt__SldsAngular}"></script>
            <script src="{!URLFOR($Resource.vlocity_cmt__cardframework_core_assets, '/latest/cardframework_assets.js')}"></script>

            <script src="{!$Resource.vlocity_cmt__VlocityDynamicForm}"></script>
            <script src="{!URLFOR($Resource.vlocity_cmt__cardframework_core_assets, '/latest/cardframework.js')}"></script>

            <script src="{!URLFOR($Resource.vlocity_cmt__LZString)}"></script>  
            <script src="{!URLFOR($Resource.vlocity_cmt__cpq_assets, '/latest/cpq.js')}"></script>
                <script type="text/javascript">
                    angular.module('hybridCPQ')
                        .controller('CPQDiscountsItemController',['$scope', '$rootScope', '$log', '$sldsModal', 'CPQ_CONST', 'CPQService', 'CPQResponsiveHelper', '$sldsToast','$q', 'PromiseQueueFactory', '$filter', '$timeout', 'CPQDynamicMessagesService', 'CPQOverrideService', 'CPQTranslateService', 'TRANSLATION_FIELDS', 'CPQUtilityService','CPQProductPromoListService',
                     function($scope, $rootScope, $log, $sldsModal, CPQ_CONST, CPQService, CPQResponsiveHelper, $sldsToast, $q, PromiseQueueFactory, $filter, $timeout, CPQDynamicMessagesService, CPQOverrideService,CPQTranslateService, TRANSLATION_FIELDS, CPQUtilityService, CPQProductPromoListService) {
                        var actionMode, givenDate, sellingPeriodMsg, dateField, tabType;
                    
                        /* Custom Labels */
                        $scope.customLabels = {};
                        var toastCustomLabels = {};
                        var labelsArray = ['CPQAddToCart','CPQClose','CPQApply','CPQMore','CPQOr','CPQDiscountsDetails','CPQEffectiveUntil','CPQAppliesToAllItems'];
                        var toastLabelsArray =  ['CPQAddItemFailed','CPQAddedItem', 'CPQApplyDiscount','CPQApply', 'CPQCancel','CPQAddingItem'];
                        actionMode = CPQService.actionMode;
                    
                        CPQService.setLabels(labelsArray, $scope.customLabels);
                        // Custom labels for toast message
                        CPQService.setLabels(toastLabelsArray, toastCustomLabels);
                        /* End Custom Labels */
                    
                        /**
                         * viewMore: Function used to launch and dispaly the Discount details
                         */
                        $scope.getCategorySelected = function() {
                            return CPQProductPromoListService.getCategorySelected();
                        };
                    
                        $scope.convertToLocalDate = function (field) {
                            var givenDate;
                            if (field != null) {
                                givenDate = new Date(field);
                                return givenDate.toLocaleDateString();
                            }
                        };
                    
                        $scope.viewMore = function(itemObject) {
                            var modalScope = $scope.$new();
                            var productDetailsModal;
                    
                            modalScope.isDetailLayoutLoaded = false;
                            modalScope.saving = false;
                            modalScope.obj = itemObject;
                    
                            productDetailsModal = $sldsModal({
                                backdrop: 'static',
                                scope: modalScope,
                                templateUrl: 'CPQDiscountDetailsCellModel.tpl.html',
                                show: true
                            });
                        };
                    
                        $scope.addToCart = function (obj,closeCallback) {
                    
                            if (obj.actions === undefined) {
                                return;
                            }
                    
                            var procesingMessageToast = $sldsToast({
                                message: toastCustomLabels['CPQAddingItem'] + ' ' + CPQTranslateService.translate(obj.Name, TRANSLATION_FIELDS.PROD2_NAME) + ' ...',
                                severity: 'info',
                                icon: 'info',
                                templateUrl: 'SldsToast.tpl.html',
                                show: CPQService.toastEnabled('info')
                            });
                            wrapFunctionCall(addToCartPromise, [obj, procesingMessageToast, closeCallback]);
                        };
                    
                        function wrapFunctionCall(call, args) {
                            args = Array.isArray(args) ? args : [args];
                            PromiseQueueFactory.addTask(call, args);
                            PromiseQueueFactory.executeTasks();
                        }
                    
                        var addToCartPromise = function(obj, procesingMessageToast, closeCallback) {
                            $rootScope.$broadcast('vlocity.layout.invalidate-total-card', {'isValid': false});
                            var deferred = $q.defer();
                            var addDiscountActionObj, errorMessages;
                    
                            if (obj.actions && obj.actions.addtocart) {
                                addDiscountActionObj = obj.actions.addtocart; 
                                CPQService.invokeAction(addDiscountActionObj).then(
                                    function(data) {
                                        $rootScope.$broadcast('vlocity.cpq.header.reload');
                                        $rootScope.$broadcast('vlocity.cpq.cart.reload');
                                        if (closeCallback) {
                                            closeCallback();
                                        }
                                        tabType ='Discounts';
                                        $rootScope.$broadcast('vlocity.cpq.discounts.reload');
                                        procesingMessageToast.hide();
                                        if (data.messages) {
                                            discountMessage = data.messages[0].message;
                                            if (data.messages[0].severity === 'ERROR') {
                                                $sldsToast({
                                                    backdrop: 'false',
                                                    message: discountMessage,
                                                    severity: 'error',
                                                    icon: 'warning',
                                                    templateUrl: 'SldsToast.tpl.html',
                                                    autohide: true,
                                                    show: CPQService.toastEnabled('error')
                                                });
                                            } else {
                                                $sldsToast({
                                                    backdrop: 'false',
                                                    message: discountMessage,
                                                    severity: 'success',
                                                    icon: 'success',
                                                    templateUrl: 'SldsToast.tpl.html',
                                                    autohide: true,
                                                    show: CPQService.toastEnabled('success')
                                                });
                                            }
                                        }
                                        CPQService.setTabView(tabType);
                                        CPQService.reloadTotalBar();
                                        deferred.resolve(toastCustomLabels['CPQAddedItem'] + ' ' + obj.Name);
                    
                                    }, function(error) {
                                        $log.error(error);
                                        procesingMessageToast.hide();
                    
                                        $sldsToast({
                                            title: toastCustomLabels['CPQAddItemFailed'] + ' ' + CPQTranslateService.translate(obj.Name, TRANSLATION_FIELDS.PROD2_NAME),
                                            content: error.message,
                                            severity: 'error',
                                            icon: 'warning',
                                            autohide: true,
                                            show: CPQService.toastEnabled('error')
                                        });
                                        deferred.reject(toastCustomLabels['CPQAddItemFailed'] + ' ' + CPQTranslateService.translate(obj.Name, TRANSLATION_FIELDS.PROD2_NAME));
                                    });
                            } else {
                                $log.debug('Addtocart action not found');
                                deferred.reject(toastCustomLabels['CPQAddItemFailed'] + ' ' + CPQTranslateService.translate(obj.Name),TRANSLATION_FIELDS.PROD2_NAME);
                            }
                    
                            return deferred.promise;
                        };
                    
                    }]);
            </script>

            <script type="text/javascript">
                var sessionId = '{!$Api.Session_ID}';
                //$rootScope.forcetkClient = new forcetk.Client();
                //$rootScope.forcetkClient.setSessionToken('{!$Api.Session_ID}');
                
                var vlocCPQ = {
                    'accessToken': '{!$Api.Session_ID}',
                    'staticResourceURL' : {
                        'slds': '{!URLFOR($Resource.vlocity_cmt__slds)}',
                    }
                };
            </script>
           <!-- loads the custom labels for the org 
               <c:HybridCPQCustomLabelsComponent /> -->
        </body>
    </html>
</apex:page>